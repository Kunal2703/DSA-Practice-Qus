-- Active: 1697386701896@@127.0.0.1@3306@practiceQuestions

--CREATE TABLE
CREATE TABLE CUSTOMERS (
    ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    AGE INT NOT NULL,
    ADDRESS CHAR(25),
    SALARY DECIMAL(18, 2),
    PRIMARY KEY (ID)
);

--Description of the Table
DESC CUSTOMERS;

--SQL CREATE TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    AGE INT NOT NULL,
    ADDRESS CHAR(25),
    SALARY DECIMAL(18, 2),
    PRIMARY KEY (ID)
);

--Creating a Table from an Existing Table
CREATE TABLE SALARY AS
SELECT ID, SALARY FROM CUSTOMERS;

DESC SALARY;

--INSERT
INSERT INTO CUSTOMERS VALUES
(1, 'Ramesh', 32, 'Ahmedabad', 2000.00),
(2, 'Khilan', 25, 'Delhi', 1500.00 ),
(3, 'Kaushik', 23, 'Kota', 2000.00 ),
(4, 'Chaitali', 25, 'Mumbai', 6500.00 ),
(5, 'Hardik', 27, 'Bhopal', 8500.00 ),
(6, 'Komal', 22, 'Hyderabad', 4500.00 ),
(7, 'Muffy', 24, 'Indore', 10000.00 );

SELECT * FROM `CUSTOMERS`;

--RENAME
RENAME TABLE CUSTOMERS TO BUYERS;

SELECT * FROM BUYERS;

ALTER TABLE BUYERS RENAME TO CUSTOMERS;

SELECT * FROM CUSTOMERS;






--ALTER TABLE − ADD Column
ALTER TABLE CUSTOMERS ADD SEX CHAR(1);

SELECT * FROM CUSTOMERS;

--ALTER TABLE − DROP COLUMN
ALTER TABLE CUSTOMERS DROP COLUMN SEX;

SELECT * FROM CUSTOMERS;

--ALTER TABLE − MODIFY DATATYPE
ALTER TABLE CUSTOMERS MODIFY COLUMN ID DECIMAL(18, 4);
SELECT * FROM CUSTOMERS;

ALTER TABLE CUSTOMERS MODIFY COLUMN ID INT;
SELECT * FROM `CUSTOMERS`;


--SELECT
SELECT 10*10

SELECT 10%10

SELECT CONCAT(NAME, ' ', AGE) AS DETAILS, ADDRESS
FROM CUSTOMERS ORDER BY `NAME`;


-- Update
UPDATE CUSTOMERS SET ADDRESS = 'Pune' WHERE ID = 6;

SELECT * FROM `CUSTOMERS` WHERE ID = 6;

-- Update Multiple ROWS and COLUMNS
UPDATE `CUSTOMERS` SET AGE = AGE+5, `SALARY` = `SALARY`+3000;
SELECT * FROM `CUSTOMERS`;


UPDATE CUSTOMERS 
SET ADDRESS = 'PUNE', SALARY = 1000.00
WHERE NAME = 'Ramesh';

SELECT * FROM `CUSTOMERS`;


-- DELETE
DELETE FROM `CUSTOMERS` WHERE ID = 6;

DELETE FROM `CUSTOMERS` WHERE AGE > 25;
SELECT * FROM `CUSTOMERS`;

drop Table `CUSTOMERS`;

CREATE TABLE CUSTOMERS (
    ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    AGE INT NOT NULL,
    ADDRESS CHAR(25),
    SALARY DECIMAL(18, 2),
    PRIMARY KEY (ID)
);


INSERT INTO CUSTOMERS VALUES
(1, 'Ramesh', 32, 'Ahmedabad', 2000.00),
(2, 'Khilan', 25, 'Delhi', 1500.00 ),
(3, 'Kaushik', 23, 'Kota', 2000.00 ),
(4, 'Chaitali', 25, 'Mumbai', 6500.00 ),
(5, 'Hardik', 27, 'Bhopal', 8500.00 ),
(6, 'Komal', 22, 'Hyderabad', 4500.00 ),
(7, 'Muffy', 24, 'Indore', 10000.00 );

SELECT * FROM `CUSTOMERS`;


CREATE TABLE ORDERS (
   OID INT NOT NULL,
   DATE VARCHAR (20) NOT NULL,
   CUSTOMER_ID INT NOT NULL,
   AMOUNT DECIMAL (18, 2)
);

INSERT INTO ORDERS VALUES
(102, '2009-10-08 00:00:00', 3, 3000.00),
(100, '2009-10-08 00:00:00', 3, 1500.00),
(101, '2009-11-20 00:00:00', 2, 1560.00),
(103, '2008-05-20 00:00:00', 4, 2060.00);

SELECT * FROM ORDERS;

DELETE CUSTOMERS, ORDERS FROM `CUSTOMERS`
INNER JOIN ORDERS ON ORDERS.`CUSTOMER_ID` = `CUSTOMERS`.`ID`
WHERE `CUSTOMERS`.`SALARY` > 2000;

SELECT * FROM `CUSTOMERS`;
SELECT * FROM `ORDERS`;


-- SORTING
SELECT * FROM `CUSTOMERS` ORDER BY NAME;
SELECT * FROM `CUSTOMERS` ORDER BY `NAME` DESC;





--  CREATE VIEW
CREATE VIEW CUSTOMERS_VIEW AS SELECT * FROM `CUSTOMERS`;
SELECT * FROM customers_view;

CREATE VIEW BUYERS_VIEW AS SELECT * FROM `CUSTOMERS`
WHERE `SALARY` > 3000;

SELECT * FROM buyers_view;

CREATE VIEW MY_VIEW AS
SELECT NAME, AGE
FROM `CUSTOMERS`
WHERE AGE >= 25
WITH CHECK OPTION;

SELECT * FROM MY_VIEW;






-- WHERE Clause
SELECT * from `CUSTOMERS`;

SELECT ID, NAME, SALARY FROM `CUSTOMERS`
WHERE SALARY > 2000.00;

UPDATE `CUSTOMERS` SET `SALARY` = `SALARY` + 1000
WHERE NAME = 'Ramesh';
SELECT * FROM `CUSTOMERS`;

SELECT * FROM `CUSTOMERS`
WHERE NAME IN('Khilan', 'Hardik', 'Muffy');

-- WHERE Clause with NOT IN Operator
SELECT * FROM `CUSTOMERS`
WHERE AGE NOT IN (25, 23, 22);

-- WHERE Clause with LIKE Operator
SELECT * FROM `CUSTOMERS` WHERE NAME LIKE 'K____%';


-- WHERE Clause with AND, OR Operators
SELECT * FROM `CUSTOMERS`
WHERE (AGE = 25 OR `SALARY` < 4500)
AND (NAME = 'Komal' OR NAME = 'Kaushik');





SELECT * FROM `CUSTOMERS`;
-- DISTINCT Keyword
SELECT `SALARY` FROM `CUSTOMERS` ORDER BY `SALARY`;
SELECT DISTINCT SALARY FROM `CUSTOMERS` ORDER BY `SALARY`;

SELECT DISTINCT AGE, SALARY FROM `CUSTOMERS` ORDER BY `SALARY`;

-- DISTINCT Keyword with COUNT() Function
SELECT COUNT(DISTINCT AGE) FROM `CUSTOMERS`;





-- ORDER BY Clause
SELECT * FROM `CUSTOMERS` ORDER BY `NAME` ASC;
SELECT * FROM `CUSTOMERS` ORDER BY AGE ASC, `SALARY` DESC;




-- GROUP BY Clause
SELECT AGE, COUNT(NAME) FROM `CUSTOMERS` GROUP BY `AGE`;
SELECT AGE, MAX(SALARY) AS MAX_SALARY
FROM `CUSTOMERS`
GROUP BY AGE; 

SELECT ADDRESS, AVG(SALARY) AS AVG_SALARY
FROM `CUSTOMERS`
GROUP BY `ADDRESS`;

SELECT ADDRESS, AGE, SUM(SALARY) AS TOTAL_SALARY
FROM `CUSTOMERS`
GROUP BY ADDRESS, AGE;

-- GROUP BY with ORDER BY Clause
SELECT AGE, MIN(SALARY) AS MIN_SALARY
FROM `CUSTOMERS`
GROUP BY `AGE`
ORDER BY MIN_SALARY DESC;

-- GROUP BY with HAVING Clause
SELECT ADDRESS, AGE, MIN(SALARY) AS MIN_SALARY
FROM `CUSTOMERS`
GROUP BY `ADDRESS`, `AGE`
HAVING AGE > 24;





-- HAVING with ORDER BY Clause
SELECT ADDRESS, AGE, SUM(SALARY) AS TOTAL_SALARY
FROM `CUSTOMERS`
GROUP BY `ADDRESS`, AGE
HAVING TOTAL_SALARY >= 5000
ORDER BY TOTAL_SALARY DESC;

-- MAX
SELECT ADDRESS, MAX(SALARY) AS MAX_SALARY
FROM `CUSTOMERS`
GROUP BY `ADDRESS`
HAVING MAX(`SALARY`) > 5240;

-- AVG
SELECT ADDRESS, AVG(SALARY) AS AVG_SALARY
FROM `CUSTOMERS`
GROUP BY `ADDRESS`
HAVING AVG(`SALARY`) > 5240;





-- AND and OR Conjunctive Operators
SELECT * FROM `CUSTOMERS`
WHERE NOT (`SALARY` > 4500 AND AGE < 26);

SELECT * FROM `CUSTOMERS`
WHERE NAME LIKE '%l' OR `SALARY`>10560  OR AGE < 25;

SELECT * FROM `CUSTOMERS`
WHERE (AGE = 25 OR `SALARY` < 4500)
AND (NAME  = 'Komal' OR NAME = 'Kaushik');





-- LIKE Operator
SELECT * FROM `CUSTOMERS`
WHERE `SALARY` LIKE '200%';


SELECT * FROM `CUSTOMERS`
WHERE NAME LIKE '%al%';

SELECT * from `CUSTOMERS`
WHERE NAME LIKE 'K____%';


SELECT * FROM `CUSTOMERS`
WHERE NAME LIKE '__m%';

SELECT * FROM `CUSTOMERS`
WHERE NAME NOT LIKE 'K%';